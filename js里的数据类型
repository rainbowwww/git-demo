JS里的数据类型：
JS里有七中数据类型分别是：number、 string、 boolean、 symbol、 undefined、 null、 object。除object为复杂类型，其余皆为简单类型。
复杂类型由简单类型组成。
1.number
>整数和小数（比如1和3.14）
表达方式有：
*整数和小数：1 1.1 .1
*科学记数法：1.23e2
*二进制：0b11
*八进制：011（后来 ES5 添加了 0o11 语法）
*十六进制：0x11
2.string
>字符串就是零个或多个排在一起的字符，放在单引号或双引号之中。

区分空格字符串和空字符串
*空格字符串长度为1
*空字符串长度为0 
```
 ''.length  //长度为0
 ' '.length //长度为1
 ```

单引号(双引号)字符串的内部，使用单引号(双引号)，须在内部的单引号(双引号)前面加上反斜杠，用来转义。
```
'\'hello'\'
"\"hello"\"
```
单引号字符串的内部，可以使用双引号。双引号字符串的内部，可以使用单引号。
```
'"hello"'
"'hello'"
```
字符串多行的写法
```
'a
o
e'  //false
```
如上的写法会报错。
js模仿命令行的写法，在需要换行后面加反斜杠\。
```
'h\
e\
l\
l\
o\'
```
表示一行的字符串可以用多行来书写，但是输出的时候还是一行来显示，如果自己没注意反斜杠后面有空格这种写法容易造成bug，不推荐使用。
推荐的写法如下：
```
'h'
+'e'
+'l'
+'l'
+'o'
```
ES6发明了新的语法用来写多行字符串的书写
```
`1234
567`
```
需要注意的是字符串需要顶行写且字符串长度包含回车，那举例的长度就是8。
3.boolean
boolean 的取值
只有两个值：true 和 false
a && b 在 a 和 b 都为 true 时，取值为 true；否则为 false
a || b 在 a 和 b 都为 false 时，取值为 false；否则为 true
4.null和undefined
这两个值都表示什么也没有，其实是语言设计的一个bug。
两者的区分：
*声明的变量没有值或非对象不想给值是undefined
*对象object没有进行给值就是null
5.object
*object 就是几种基本类型（无序地）组合在一起
*object 的 key 一律是字符串，不存在其他类型的 key
*object 里面可以有 object
*如果object里面的key不加引号则key的命名需要遵循标识符的命名规则。
*如果key的命名符合标识符的命名规则，则object['key']可以写成object.key
*注意 object.key 与 object[key] 不同
*删除一个key
   ```
    var person = {
      name: 'xxx', 
      'child': {
          name: 'Jack'
        },
    }
    delete person['name'];
    console.log(person['name']); //undefined  无value
    'name' in person ;            //false   无key
   ```
typeof 用来数据类型的查询
```
var t = 1
typeof t  // number

var n = null
typeof n  // object js的bug

var f = function(){}
typeof f // function js的bug
```